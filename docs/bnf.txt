<SourceFile> := <TopLevelStatement>* <EOF>

<TopLevelStatement> := <VarDeclaration> |
                        <FuncDeclaration>

<VarDeclaration> := ( "const" | "let" ) <Identifier> ":" <TypeName> ( "=" <Expression> ) ";"

<FuncDeclaration> := "function" <Identifier> "(" <FuncParameters> ")" ":" <TypeName> <StatementBlock>

<FuncParameters> := // TODO

<TypeName> := ( "[" "]" )* <Identifier>
  
<StatementBlock> := "{" <BlockLevelStatement>* "}"

<BlockLevelStatement> := <VarDeclaration> |
                          <DeferStatement> |
                          <IfStatement> |
                          <ReturnStatement> |
                          <StatementBlock> |
                          <ExpressionStatement>

<DeferStatement> := "defer" <BlockLevelStatement> ";"

<IfStatement> := "if" "(" <Expression> ")" <BlockLevelStatement> ( "else" <BlockLevelStatement> )?

<WhileStatement> := "while" "(" <Expression> ")" <BlockLevelStatement>

<ReturnStatement> := "return" <Expression> ";"
  
<ExpressionStatement> := <Expression> ";"
  
<Expression> := <AssignmentExpression> | <CallExpression>

<AssignmentExpression> := <LogicalOrExpression> | <Identifier> <AssignmentOperator> <Expression>

<AssignmentOperator> := "=" | "+=" | "-="

<LogicalOrExpression> := <LogicalAndExpression> ( "||" <LogicalAndExpression> )*

<LogicalAndExpression> := <EqualityExpression> ( "&&" <EqualityExpression> )*

<EqualityExpression> := <ComparisonExpression> ( ( "!=" | "==" ) <ComparisonExpression> )*

<ComparisonExpression> := <AdditiveExpression> ( ( ">" | ">=" | "<" | "<=" ) <AdditiveExpression> )*

<AdditiveExpression> := <MultiplicativeExpression> ( ( "+" | "-" ) <MultiplicativeExpression> )*

<MultiplicativeExpression> := <UnaryExpression> ( ( "*" | "/" ) <UnaryExpression> )*

<UnaryExpression> := ( "!" | "-" ) <UnaryExpression> | <PrimaryExpression>

<PrimaryExpression> := <ParenthesizedExpression> | <BoolLiteral> | <IntLiteral> | <StringLiteral> | 

<ParenthesizedExpression> := "(" <Expression> ")"

<CallExpression> := <Expression> "(" <Expression>? ("," <Expression>)* ")"

<ElementAccessExpression> := <Expression> "[" <Expression> "]"

<PropertyAccessExpression> := <Expression> "." <Identifier>

<BoolLiteral> := "true" | "false"

<IntLiteral> := <digit>*

<StringLiteral> := "\"" ( <letter> | <digit> )* "\""

<Identifier> := ( <letter> | <identifierSymbol> ) ( <letter> | <digit> | <identifierSymbol> )*

<identifierSymbol := "_"
  
<letter> := "[A-Za-z]"
  
<digit> := "[0-9]"
  


  
